import type { GetServerSideProps, NextPage } from 'next';

import { Session, unstable_getServerSession } from 'next-auth';
import { signIn, signOut, useSession } from 'next-auth/react';
import Head from 'next/head';
import Link from 'next/link';
import React, { useState } from 'react';
import { getServerAuthSession } from '../server/common/get-server-auth-session';
import { authOptions } from './api/auth/[...nextauth]';

const Home: NextPage = () => {
	return (
		<>
			<Head>
				<title>Be on time</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className="container mx-auto flex flex-col items-center justify-center h-screen p-4">
				<h1 className="font-extrabold text-gray-700">
					Be <span className="text-purple-300">On</span> Time old
				</h1>
				<HomeContent />
			</main>
		</>
	);
};

const HomeContent = () => {
	const { data: session } = useSession();
	const [isLoading, setIsLoading] = useState(false);

	const loginWithGoogle = () => signIn('google');

	const logOut = () => {
		setIsLoading(true);
		signOut();
	};
	console.log(session);
	if (!session) {
		return (
			<div className="flex">
				<LoginButton onClick={loginWithGoogle} />
			</div>
		);
	}

	return (
		<div>
			<p>
				<span className="font-semibold font-mono">{session.user?.name}</span> , you are logged in!
				<br />
				<Link href={`/${session.user?.id}/reserve/`}>Reserve {session.user?.id}</Link>
			</p>

			<a
				// loading={isLoading}
				onClick={logOut}
				// variant="outlined"
				// color="error"
				className="rounded-md w-full">
				Log out
			</a>
		</div>
	);
};

const LoginButton: React.FC<{ onClick: () => void }> = ({ onClick }) => {
	const [isLoading, setIsLoading] = useState(false);

	const onClickAction = () => {
		setIsLoading(true);
		onClick();
	};

	return (
		<a
			onClick={onClickAction}
			// loading={isLoading}
			// variant="outlined"
			// color="secondary"
			className="rounded-md w-full">
			Login with Google
		</a>
	);
};

export const getServerSideProps: GetServerSideProps<{ session: Session | null }> = async (ctx) => {
	const session = await getServerAuthSession(ctx);

	return {
		props: {
			session,
		},
	};
};

export default Home;
