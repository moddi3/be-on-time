// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "postgres" // NOTE: sqlite does not work with NextAuth.js
    provider     = "mysql" // NOTE: sqlite does not work with NextAuth.js
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String? @db.Text
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    timeSlots     TimeSlot[]
    reservarions  Reservation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// model Contact {
model Client {
    id    String @id @default(cuid())
    name  String
    email String
    // emails String[]
    // redirectUri String?
    // grants      String[]
    // scopes      String[]
    // userId      String
    // user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    // reservations Reservation[]
}

model TimeSlot {
    id          String       @id @default(cuid())
    userId      String
    weekDay     Int
    time        DateTime     @db.Time
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    reservation Reservation?

    @@index([userId])
}

model Reservation {
    id          String            @id @default(cuid())
    userId      String
    clientId    String
    timeSlotId  String            @unique
    status      ReservationStatus @default(CREATED)
    date        DateTime
    description String
    user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    timeSlot    TimeSlot          @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
    // client      Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum ReservationStatus {
    CREATED
    PENDING
    CONFIRMED
    CANCELLED
    CANCELLED_BY_CLIENT
}
